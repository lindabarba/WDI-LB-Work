4/10
INTRO:
double-quotes more conventional
snake_case
way more methods in Ruby than JS
? how many methods is the average programmer familiar with?
encapsulation - OOP
	Unlike JavaScript, in Ruby, every "property" on an object is a method, it never contains data.
	Don't misunderstand, objects contain data, it's just that the data needs to be set and retrieved using method calls.
"=" is actually a method, this is not "assign"
everything in Ruby is truthy except "false" and "nil" because all things are objects and objects are truthy
variable identifiers:
_local_variable
@instance_var

[a-z] or _ - Local variable
$ - Global variable
@ - Instance variable
@@ - Class variable
[A-Z] - A constant (class/module/global)

the way we name variables determines scope

convention is to all caps constants

CONTROL FLOW
three main types:
"The execution sequence of instructions in a program determined at run time with the use of control structures."

Everything in Ruby is considered to be truthy except for ________ and ________.
nil & false
-
As compared to JS, there are a couple of values that have different truthiness. What are they?
0 and ""

`<=>` in action:
> 5 <=> 10
=> -1
> 10 <=> 5
=> 1
> 5 <=> 5
=> 0

correct = true
puts "Congrats!" if correct == true
# this is shorter:
# puts "Congrats!" if correct

When using a while or until loop, we must be careful not put the program's execution into an __________ loop.
infinite
How do we avoid the above scenario?
include condition to exit

In your own words, how would you describe Control Flow?


The three primary types of control flow are:
1) Sequence
2) ___________ Branching (if & unless)
3) ___________ Looping (while & until)

Why might you decide to use the modified version of the while/until loop, where the condition test is put at the end of the code block?
If you want code to run once

--

Section 2 Exercise 1:

print "Enter a, b, or c: "
choice = gets.chomp
if choice == "a"
  puts "a is for apple"
elsif choice == "b"
  puts "b is for banana"
elsif choice == "c"
  puts "c is for cantaloupe"
else
  puts "you're a rebel"
end

Section 2 Exercise 2:

Julia's code:
choice = ""
until choice == "no more fruit"
  print "Enter a, b or c: "
  choice = gets.chomp
  if choice == "a"
    puts "a is for apple"
  elsif choice == "b"
    puts "b is for banana"
  elsif choice == "c"
    puts "c is for cantaloupe"
  else
    puts "you're a rebel"
  end
end

-----
ARRAYS, HASHES, & BLOCKS

evens = [2,3,4,5,6,7,8,9]

# What is evens.count?
evens.count do |number|
  if number % 2 == 0
    puts "#{number}"
  else
    puts "The number #{number} is odd."
  end
end
 - this will iterate over the number 8 not the array because evens.count will return 8

4/11
RUBY CLASSES, OBJECTS, & METHODS
--------
classes - create objects (little factories/blueprints for objects)
objects - everything, an instance of a class
methods - functions associated with objects and classes

instatiation - process of creating an object
classes have a new method that's used to create an instance of a class. A process, not surprisingly, known as instantiation.

attributes - data
cannot directly access attributes, must use methods to get & set
helper methods `attr_reader`, `attr_writer`, & `attr_accessor` to do this

OBJECTS
consist of attributes & methods
objects interact with each by invoking each other's methods, aka 'sending messages'
model-real world objects that pertain to application

ATTRIBUTES
data held within an object
define properties of object

METHODS
define behavior or actions available in an object
define what object does

CLASS
blueprint used to create objects
another way - a factory that produces object instances of a certain class
upper CamelCase

>>>>>>>>>>>>>>> CMD+[ or CMD+] will tab line in from anywhere in line

? What method does initialize mimic in JavaScript?
	Constructor functions

my_stand.manager = "Pee-wee Herman" is the preferrd syntax
	my_stand.manager= "Pee-wee Herman"

? What's the special method in a class that is automatically called by Ruby when we create an instance of it?
	initialize

class variable doesn't need initialization because it lives in class as opposed to instance variable



? Unlike in JavaScript, we cannot read or change the values of an object's attributes directly. Instead, we must write ________ and/or ________ methods or use Ruby's ________ methods.
	getter	setter	 accessor

? What's instantiation?
	creating an instance of a class via Ruby's `new` method

? What sort of variable do we use inside an object to share information throughout that object, including inside all of its methods?
	instance variables

-------------
Tic Tac MF Toe

initialize can include welcome message

print board
store squares in a hash
invalid move prompt

while until winner:
get move
check for winner
print board







































